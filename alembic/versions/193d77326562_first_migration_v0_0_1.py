"""first migration  v0.0.1

Revision ID: 193d77326562
Revises: 
Create Date: 2025-07-22 15:27:18.567335

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '193d77326562'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('printing_device',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('device_class', sa.String(), nullable=False),
    sa.Column('device_identifier', sa.String(), nullable=False),
    sa.Column('subnet_mask', sa.String(), nullable=True),
    sa.Column('gateway', sa.String(), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=False),
    sa.Column('port', sa.Integer(), nullable=True),
    sa.Column('comment', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('device_identifier')
    )
    op.create_index(op.f('ix_printing_device_id'), 'printing_device', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('cor_id', sa.String(length=250), nullable=True),
    sa.Column('email', sa.String(length=250), nullable=False),
    sa.Column('password', sa.String(length=250), nullable=False),
    sa.Column('user_sex', sa.String(length=10), nullable=True),
    sa.Column('birth', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('unique_cipher_key', sa.String(length=250), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('cor_id'),
    sa.UniqueConstraint('email')
    )
    op.create_index('idx_users_cor_id', 'users', ['cor_id'], unique=False)
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.create_table('verification',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=250), nullable=False),
    sa.Column('verification_code', sa.Integer(), nullable=True),
    sa.Column('email_confirmation', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_index('idx_verification_email', 'verification', ['email'], unique=False)
    op.create_table('doctors',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('doctor_id', sa.String(length=36), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('middle_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('doctors_photo', sa.LargeBinary(), nullable=True),
    sa.Column('scientific_degree', sa.String(length=100), nullable=True),
    sa.Column('date_of_last_attestation', sa.Date(), nullable=True),
    sa.Column('status', sa.Enum('pending', 'approved', 'agreed', 'rejected', 'need_revision', name='doctor_status'), nullable=False),
    sa.Column('passport_code', sa.String(length=20), nullable=True),
    sa.Column('taxpayer_identification_number', sa.String(length=20), nullable=True),
    sa.Column('reserv_scan_data', sa.LargeBinary(), nullable=True),
    sa.Column('reserv_scan_file_type', sa.String(), nullable=True),
    sa.Column('date_of_next_review', sa.Date(), nullable=True),
    sa.Column('place_of_registration', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.cor_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('doctor_id')
    )
    op.create_table('lab_assistants',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('lab_assistant_cor_id', sa.String(length=36), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('surname', sa.String(length=100), nullable=True),
    sa.Column('middle_name', sa.String(length=100), nullable=True),
    sa.Column('lab_assistants_photo', sa.LargeBinary(), nullable=True),
    sa.ForeignKeyConstraint(['lab_assistant_cor_id'], ['users.cor_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('lab_assistant_cor_id')
    )
    op.create_table('lawyers',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('lawyer_cor_id', sa.String(length=36), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('surname', sa.String(length=100), nullable=True),
    sa.Column('middle_name', sa.String(length=100), nullable=True),
    sa.ForeignKeyConstraint(['lawyer_cor_id'], ['users.cor_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('lawyer_cor_id')
    )
    op.create_table('patients',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('patient_cor_id', sa.String(length=250), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=True),
    sa.Column('last_name', sa.String(length=250), nullable=True),
    sa.Column('first_name', sa.String(length=250), nullable=True),
    sa.Column('middle_name', sa.String(length=250), nullable=True),
    sa.Column('birth_date', sa.Date(), nullable=True),
    sa.Column('sex', sa.String(length=10), nullable=True),
    sa.Column('email', sa.String(length=250), nullable=True),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('address', sa.String(length=500), nullable=True),
    sa.Column('photo', sa.LargeBinary(), nullable=True),
    sa.Column('change_date', sa.DateTime(), nullable=True),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.Column('search_tokens', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('patient_cor_id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('records',
    sa.Column('record_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('record_name', sa.String(length=250), nullable=False),
    sa.Column('website', sa.String(length=250), nullable=True),
    sa.Column('username', sa.LargeBinary(), nullable=True),
    sa.Column('password', sa.LargeBinary(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('edited_at', sa.DateTime(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('is_favorite', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('record_id')
    )
    op.create_index('idx_records_user_id', 'records', ['user_id'], unique=False)
    op.create_table('user_sessions',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('device_type', sa.String(length=250), nullable=True),
    sa.Column('device_info', sa.String(length=250), nullable=True),
    sa.Column('ip_address', sa.String(length=250), nullable=True),
    sa.Column('device_os', sa.String(length=250), nullable=True),
    sa.Column('jti', sa.String(), nullable=True, comment='JTI последнего Access токена, выданного для этой сессии'),
    sa.Column('refresh_token', sa.LargeBinary(), nullable=True),
    sa.Column('access_token', sa.LargeBinary(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.cor_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('jti'),
    sa.UniqueConstraint('user_id', 'device_info', name='uq_user_device_session')
    )
    op.create_index('idx_user_sessions_user_id', 'user_sessions', ['user_id'], unique=False)
    op.create_table('cases',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('patient_id', sa.String(length=36), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('case_code', sa.String(length=250), nullable=True),
    sa.Column('bank_count', sa.Integer(), nullable=True),
    sa.Column('cassette_count', sa.Integer(), nullable=True),
    sa.Column('glass_count', sa.Integer(), nullable=True),
    sa.Column('grossing_status', sa.Enum('PROCESSING', 'COMPLETED', 'CREATED', name='grossing_status'), nullable=True),
    sa.Column('pathohistological_conclusion', sa.Text(), nullable=True),
    sa.Column('microdescription', sa.Text(), nullable=True),
    sa.Column('general_macrodescription', sa.Text(), nullable=True),
    sa.Column('case_owner', sa.String(length=36), nullable=True),
    sa.Column('closing_date', sa.DateTime(), nullable=True),
    sa.Column('is_printed_cassette', sa.Boolean(), nullable=True),
    sa.Column('is_printed_glass', sa.Boolean(), nullable=True),
    sa.Column('is_printed_qr', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['case_owner'], ['doctors.doctor_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cases_case_code'), 'cases', ['case_code'], unique=True)
    op.create_index(op.f('ix_cases_patient_id'), 'cases', ['patient_id'], unique=False)
    op.create_table('certificates',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('doctor_id', sa.String(length=36), nullable=False),
    sa.Column('file_data', sa.LargeBinary(), nullable=True),
    sa.Column('file_type', sa.String(), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('series', sa.String(length=50), nullable=False),
    sa.Column('number', sa.String(length=50), nullable=False),
    sa.Column('university', sa.String(length=250), nullable=False),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.doctor_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('clinic_affiliations',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('doctor_id', sa.String(length=36), nullable=False),
    sa.Column('clinic_name', sa.String(length=250), nullable=False),
    sa.Column('department', sa.String(length=250), nullable=True),
    sa.Column('position', sa.String(length=250), nullable=True),
    sa.Column('specialty', sa.String(length=250), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.doctor_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('clinic_patient_statuses',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('patient_id', sa.String(length=36), nullable=False),
    sa.Column('patient_status_for_clinic', sa.Enum('registered', 'diagnosed', 'under_treatment', 'hospitalized', 'discharged', 'died', 'in_process', 'referred_for_additional_consultation', 'awaiting_report', 'completed', 'error', name='patientclinicstatus'), nullable=True),
    sa.Column('assigned_date', sa.DateTime(), nullable=True),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('diplomas',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('doctor_id', sa.String(length=36), nullable=False),
    sa.Column('file_data', sa.LargeBinary(), nullable=True),
    sa.Column('file_type', sa.String(), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('series', sa.String(length=50), nullable=False),
    sa.Column('number', sa.String(length=50), nullable=False),
    sa.Column('university', sa.String(length=250), nullable=False),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.doctor_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('doctor_patient_statuses',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('patient_id', sa.String(length=36), nullable=False),
    sa.Column('doctor_id', sa.String(length=36), nullable=False),
    sa.Column('status', sa.Enum('registered', 'diagnosed', 'under_treatment', 'hospitalized', 'discharged', 'died', 'in_process', 'referred_for_additional_consultation', name='patientstatus'), nullable=False),
    sa.Column('assigned_date', sa.DateTime(), nullable=True),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('patient_id', 'doctor_id', name='unique_patient_doctor_status')
    )
    op.create_table('doctor_signatures',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('doctor_id', sa.String(length=36), nullable=False),
    sa.Column('signature_name', sa.String(length=255), nullable=True),
    sa.Column('signature_scan_data', sa.LargeBinary(), nullable=True),
    sa.Column('signature_scan_type', sa.String(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('case_parameters',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('case_id', sa.String(length=36), nullable=False),
    sa.Column('macro_archive', sa.Enum('ESS', 'RSS', name='macroarchive'), nullable=True),
    sa.Column('decalcification', sa.Enum('ABSENT', 'EDTA', 'ACIDIC', name='decalcificationtype'), nullable=True),
    sa.Column('sample_type', sa.Enum('NATIVE', 'BLOCKS', name='sampletype'), nullable=True),
    sa.Column('material_type', sa.Enum('R', 'B', 'E', 'C', 'CB', 'S', 'A', 'EM', 'OTHER', name='materialtype'), nullable=True),
    sa.Column('urgency', sa.Enum('S', 'U', 'F', name='urgencytype'), nullable=True),
    sa.Column('container_count_actual', sa.Integer(), nullable=True),
    sa.Column('fixation', sa.Enum('NBF_10', 'OSMIUM', 'BOUIN', 'ALCOHOL', 'GLUTARALDEHYDE_2', 'OTHER', name='fixationtype'), nullable=True),
    sa.Column('macro_description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('case_id')
    )
    op.create_table('referrals',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('case_id', sa.String(), nullable=False, comment='ID связанного кейса'),
    sa.Column('case_number', sa.String(), nullable=False, comment='Номер кейса'),
    sa.Column('created_at', sa.DateTime(), nullable=True, comment='Дата создания направления'),
    sa.Column('research_type', sa.Enum('CYTOLOGY', 'HISTOPATHOLOGY', 'IMMUNOHISTOCHEMISTRY', 'FISH_CISH', 'CB', 'S', 'A', 'EM', name='studytype'), nullable=True, comment='Вид исследования'),
    sa.Column('container_count', sa.Integer(), nullable=True, comment='Фактическое количество контейнеров'),
    sa.Column('medical_card_number', sa.String(), nullable=True, comment='Номер медкарты'),
    sa.Column('clinical_data', sa.Text(), nullable=True, comment='Клинические данные'),
    sa.Column('clinical_diagnosis', sa.String(), nullable=True, comment='Клинический диагноз'),
    sa.Column('medical_institution', sa.String(), nullable=True, comment='Медицинское учреждение'),
    sa.Column('department', sa.String(), nullable=True, comment='Отделение'),
    sa.Column('attending_doctor', sa.String(), nullable=True, comment='Лечащий врач'),
    sa.Column('doctor_contacts', sa.String(), nullable=True, comment='Контакты врача'),
    sa.Column('medical_procedure', sa.String(), nullable=True, comment='Медицинская процедура'),
    sa.Column('final_report_delivery', sa.Text(), nullable=True, comment='Финальный репорт отправить'),
    sa.Column('issued_at', sa.DateTime(), nullable=True, comment='Выдано (дата)'),
    sa.Column('biomaterial_date', sa.DateTime(), nullable=True, comment='Дата забора биоматериала'),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('case_id')
    )
    op.create_index(op.f('ix_referrals_case_number'), 'referrals', ['case_number'], unique=False)
    op.create_index(op.f('ix_referrals_id'), 'referrals', ['id'], unique=False)
    op.create_table('reports',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('case_id', sa.String(length=36), nullable=False),
    sa.Column('attached_glass_ids', sa.ARRAY(sa.String(length=36)), nullable=True),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('case_id')
    )
    op.create_table('samples',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('case_id', sa.String(length=36), nullable=False),
    sa.Column('sample_number', sa.String(length=50), nullable=True),
    sa.Column('cassette_count', sa.Integer(), nullable=True),
    sa.Column('glass_count', sa.Integer(), nullable=True),
    sa.Column('archive', sa.Boolean(), nullable=True),
    sa.Column('macro_description', sa.Text(), nullable=True),
    sa.Column('is_printed_cassette', sa.Boolean(), nullable=True),
    sa.Column('is_printed_glass', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cassettes',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('sample_id', sa.String(length=36), nullable=False),
    sa.Column('cassette_number', sa.String(length=50), nullable=True),
    sa.Column('comment', sa.String(length=500), nullable=True),
    sa.Column('glass_count', sa.Integer(), nullable=True),
    sa.Column('is_printed', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['sample_id'], ['samples.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('doctor_diagnoses',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('report_id', sa.String(length=36), nullable=False),
    sa.Column('doctor_id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('immunohistochemical_profile', sa.Text(), nullable=True),
    sa.Column('molecular_genetic_profile', sa.Text(), nullable=True),
    sa.Column('pathomorphological_diagnosis', sa.Text(), nullable=True),
    sa.Column('icd_code', sa.String(length=50), nullable=True),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('report_macrodescription', sa.Text(), nullable=True),
    sa.Column('report_microdescription', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.doctor_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('referral_attachments',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('referral_id', sa.String(), nullable=False, comment='ID связанного направления'),
    sa.Column('filename', sa.String(), nullable=False, comment='Имя файла'),
    sa.Column('content_type', sa.String(), nullable=False, comment='Тип содержимого (например, image/jpeg, application/pdf)'),
    sa.Column('file_data', sa.LargeBinary(), nullable=False, comment='Бинарные данные файла'),
    sa.ForeignKeyConstraint(['referral_id'], ['referrals.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_referral_attachments_id'), 'referral_attachments', ['id'], unique=False)
    op.create_table('glasses',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('cassette_id', sa.String(length=36), nullable=False),
    sa.Column('glass_number', sa.Integer(), nullable=True),
    sa.Column('staining', sa.Enum('HE', 'ALCIAN_PAS', 'CONGO_RED', 'MASSON_TRICHROME', 'VAN_GIESON', 'ZIEHL_NEELSEN', 'WARTHIN_STARRY_SILVER', 'GROCOTT_METHENAMINE_SILVER', 'TOLUIDINE_BLUE', 'PERLS_PRUSSIAN_BLUE', 'PAMS', 'PICROSIRIUS', 'SIRIUS_RED', 'THIOFLAVIN_T', 'TRICHROME_AFOG', 'VON_KOSSA', 'GIEMSA', 'OTHAR', name='stainingtype'), nullable=True),
    sa.Column('glass_data', sa.LargeBinary(), nullable=True),
    sa.Column('is_printed', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['cassette_id'], ['cassettes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('report_signatures',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('diagnosis_entry_id', sa.String(length=36), nullable=True),
    sa.Column('doctor_id', sa.String(length=36), nullable=False),
    sa.Column('doctor_signature_id', sa.String(length=36), nullable=True),
    sa.Column('signed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['diagnosis_entry_id'], ['doctor_diagnoses.id'], ),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.id'], ),
    sa.ForeignKeyConstraint(['doctor_signature_id'], ['doctor_signatures.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('diagnosis_entry_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('report_signatures')
    op.drop_table('glasses')
    op.drop_index(op.f('ix_referral_attachments_id'), table_name='referral_attachments')
    op.drop_table('referral_attachments')
    op.drop_table('doctor_diagnoses')
    op.drop_table('cassettes')
    op.drop_table('samples')
    op.drop_table('reports')
    op.drop_index(op.f('ix_referrals_id'), table_name='referrals')
    op.drop_index(op.f('ix_referrals_case_number'), table_name='referrals')
    op.drop_table('referrals')
    op.drop_table('case_parameters')
    op.drop_table('doctor_signatures')
    op.drop_table('doctor_patient_statuses')
    op.drop_table('diplomas')
    op.drop_table('clinic_patient_statuses')
    op.drop_table('clinic_affiliations')
    op.drop_table('certificates')
    op.drop_index(op.f('ix_cases_patient_id'), table_name='cases')
    op.drop_index(op.f('ix_cases_case_code'), table_name='cases')
    op.drop_table('cases')
    op.drop_index('idx_user_sessions_user_id', table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index('idx_records_user_id', table_name='records')
    op.drop_table('records')
    op.drop_table('patients')
    op.drop_table('lawyers')
    op.drop_table('lab_assistants')
    op.drop_table('doctors')
    op.drop_index('idx_verification_email', table_name='verification')
    op.drop_table('verification')
    op.drop_index('idx_users_email', table_name='users')
    op.drop_index('idx_users_cor_id', table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_printing_device_id'), table_name='printing_device')
    op.drop_table('printing_device')
    # ### end Alembic commands ###
