





function generateQrCodeFromText(corId) {
    const qrCodeDiv = document.getElementById("qrcode"); // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å ID 'qrcode'
    if (!qrCodeDiv) {
        console.error("–≠–ª–µ–º–µ–Ω—Ç —Å ID 'qrcode' –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    qrCodeDiv.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π QR-–∫–æ–¥
    new QRCode(qrCodeDiv, {
        text: corId,
        width: 200,
        height: 200
    });
}





function showCorIdInfo(corId) {
    if( checkToken()){
    const accessToken = getToken();
           if (!accessToken) {
               console.error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!');
               return;
           }

       fetch("/api/medical/cor_id/show_corid_info", {
           method: "POST",
           headers: {
               "Content-Type": "application/json",
               "Authorization": `Bearer ${accessToken}`
           },
           body: JSON.stringify({ cor_id: corId })
       })
       .then(response => {
           if (!response.ok) {
               console.error('–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', response.statusText);
               throw new Error("COR-Id –Ω–µ –Ω–∞–π–¥–µ–Ω");
           }
           return response.json();
       })
       .then(data => {
           // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–π –≤ –¥–∞—Ç—É
           const baseDate = new Date(2024, 0, 1); // 1 —è–Ω–≤–∞—Ä—è 2024 –≥–æ–¥–∞
           const registrationDate = new Date(baseDate);
           registrationDate.setDate(baseDate.getDate() + data.n_days_since);

           // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
           const options = { year: 'numeric', month: 'long', day: 'numeric' };
           const formattedDate = registrationDate.toLocaleDateString('ru-RU', options);

           // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
           document.getElementById("corIdValue").textContent = corId;
           const corIdInfo = `
            <div class="cor-text">
               <p><strong>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</strong> ${formattedDate}</p>
               <p><strong>–ù–æ–º–µ—Ä —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:</strong> ${data.facility_number}</p>
               <p><strong>–ù–æ–º–µ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∑–∞ –¥–µ–Ω—å:</strong> ${data.register_per_day}</p>
               <p><strong>–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> ${data.birth_year}</p>
               <p><strong>–ü–æ–ª:</strong> ${data.gender}</p>
               <p><strong>–í–µ—Ä—Å–∏—è:</strong> ${data.version}</p>
            </div>
                  
           `;
           document.getElementById("corIdInfo").innerHTML = corIdInfo;
           openModal();

           // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
           generateQrCodeFromText(corId); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
       })
       .catch(error => {
           console.error("–û—à–∏–±–∫–∞:", error);
           alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ COR-ID");
       });
   }}




   function initializeCheckboxes() {
    const columnState = JSON.parse(localStorage.getItem('columnsState') || '{}');
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ localStorage:', columnState);

    // –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤—Å–µ–º —á–µ–∫–±–æ–∫—Å–∞–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const checkboxes = document.querySelectorAll('#columnSelectModal input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
        const columnId = checkbox.id.replace('checkbox-', ''); // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–ª–æ–Ω–∫–∏ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        console.log('ID –∫–æ–ª–æ–Ω–∫–∏:', columnId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
        if (columnState[columnId] !== undefined) {
            checkbox.checked = columnState[columnId];
            console.log(`–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ${columnId}: ${columnState[columnId]}`);
        } else {
            console.log(`–ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ${columnId}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
        }
    });
}


function populateTable(users) {
    if( checkToken()){
    console.log("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", users); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const tbody = document.querySelector('#userTable tbody');
    tbody.innerHTML = ''; // –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º

    users.forEach(user => {
        const row = document.createElement('tr');

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        const currentTime = new Date();
        const lastActiveTime = user.last_active ? new Date(user.last_active) : null;
        const timeDiff = lastActiveTime ? (currentTime - lastActiveTime) / (1000 * 60 * 60) : null; // –†–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–∞—Ö

        const activityTitle = lastActiveTime
        ? (timeDiff >= 1 
            ? `${Math.floor(timeDiff)} —á ${Math.floor((timeDiff % 1) * 60)} –º–∏–Ω –Ω–∞–∑–∞–¥` // –ß–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
            : `${Math.floor(timeDiff * 60)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`) // –¢–æ–ª—å–∫–æ –º–∏–Ω—É—Ç—ã
            : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';

        let activityColor = 'gray'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ—Ä—ã–π

        if (timeDiff !== null) {
            if (timeDiff <= 24) {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ —Ü–≤–µ—Ç–∞ (–æ—Ç 0 –¥–æ 1)
                const gradientFactor = timeDiff / 24;

                // –í—ã—á–∏—Å–ª—è–µ–º —Ü–≤–µ—Ç –æ—Ç –∑–µ–ª—ë–Ω–æ–≥–æ (0, 255, 0) –∫ –∫—Ä–∞—Å–Ω–æ–º—É (255, 0, 0)
                const red = Math.round(gradientFactor * 255); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
                const green = Math.round((1 - gradientFactor) * 255); // –£–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
                activityColor = `rgb(${red}, ${green}, 0)`; // –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ü–≤–µ—Ç
            }
        }


        row.innerHTML = `
        ${document.getElementById('header-user_index').style.display !== 'none' ? `<td>${user.user_index}</td>` : ''}
        ${document.getElementById('header-id').style.display !== 'none' ? `<td>${user.id}</td>` : ''}
        ${document.getElementById('header-cor_id').style.display !== 'none' ? `<td class="cor-id-cell">${user.cor_id}</td>` : ''}
        ${document.getElementById('header-user_sex').style.display !== 'none' ? `<td>${user.user_sex}</td>` : ''}
        ${document.getElementById('header-birth').style.display !== 'none' ? `<td>${user.birth}</td>` : ''}
        ${document.getElementById('header-email').style.display !== 'none' ? `<td>${user.email}</td>` : ''}
        ${document.getElementById('header-created_at').style.display !== 'none' ? `<td>${new Date(user.created_at).toLocaleString()}</td>` : ''}
        ${document.getElementById('header-last_password_change').style.display !== 'none' ? `<td>${new Date(user.last_password_change).toLocaleString()}</td>` : ''}      
        ${document.getElementById('header-last_active').style.display !== 'none' ? `<td>${new Date(user.last_active).toLocaleString()}</td>` : ''} 
            <td> <select onchange="confirmStatusChange('${user.email}', this.value)">
                    <option value="basic" ${user.account_status === 'basic' ? 'selected' : ''}>basic</option>
                    <option value="premium" ${user.account_status === 'premium' ? 'selected' : ''}>premium</option>
                </select>
            </td>
            <td> <span class="delete-icon" onclick="deleteUser('${user.email}')">üóëÔ∏è</span>
                <span class="toggle-status-icon" onclick="toggleUserStatus('${user.email}', ${user.is_active ?? true})">
                 ${user.is_active !== false ? 'üîì' : 'üîí'}</span>
                 <span class="roles-icon" onclick="showUserRoles('${user.cor_id}')">üë§</span>
                     <span class="activity-indicator" style="background: ${activityColor}; display: inline-block; width: 12px; height: 12px;" title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityTitle}"></span>
            </td>
        `;

        tbody.appendChild(row);
    });
    adjustTableLayout();
}}

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      async function deleteUser(email) {
        const url = `/api/admin/${email}`;

        if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: ${email}?`)) {
            try {
                const response = await fetch(url, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + getToken()
                    }
                });

                if (response.ok) {
                    alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
                    getAllUsers(); // –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                } else {
                    const errorData = await response.json();
                    alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${errorData.message || response.statusText}`);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
            }
        }
    }


  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
  function toggleColumn(column) {
    const header = document.getElementById(`header-${column}`);
    if (!header) return;
    
    const isVisible = header.style.display !== 'none';
    header.style.display = isVisible ? 'none' : '';

    const columnIndex = Array.from(header.parentNode.children).indexOf(header) + 1;
    document.querySelectorAll(`tbody td:nth-child(${columnIndex})`).forEach(cell => {
        cell.style.display = header.style.display;
    });

    const columnState = JSON.parse(localStorage.getItem('columnsState') || '{}');
    columnState[column] = !isVisible;
    localStorage.setItem('columnsState', JSON.stringify(columnState));

    initializeCheckboxes();

    // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Å—á—ë—Ç —à–∏—Ä–∏–Ω—ã –∏ –∫–æ–ª–æ–Ω–æ–∫, –ø–æ—Ç–æ–º –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    adjustTableLayout();
   
    loadPage();
}