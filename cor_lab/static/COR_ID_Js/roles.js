



async function saveDoctorData(corId) {
    try {
        console.log("üì§ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–∞—á–∞...");

        const data = {
            first_name: document.getElementById("doctorFirstName").value.trim(),
            last_name: document.getElementById("doctorLastName").value.trim(),
            middle_name: document.getElementById("doctorMiddleName").value.trim(),
            work_email: document.getElementById("doctorWorkEmail").value.trim(),
            phone_number: document.getElementById("doctorPhone").value.trim(),
            scientific_degree: document.getElementById("doctorDegree").value.trim(),
            passport_code: document.getElementById("doctorPassportCode").value.trim(),
            place_of_registration: document.getElementById("doctorRegistration").value.trim(),
            taxpayer_identification_number: document.getElementById("doctorInn").value.trim(),
            date_of_last_attestation: document.getElementById("doctorAttestationDate").value || new Date().toISOString().split('T')[0],
            diplomas: [],
            certificates: [],
            clinic_affiliations: []
        };

        console.log("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data);

        // –î–∏–ø–ª–æ–º—ã
        document.querySelectorAll('#diplomas-tab div[data-id]').forEach((d, idx) => {
            const inputs = d.querySelectorAll('input');
            const diploma = {
                university: inputs[0]?.value.trim() || "",
                series: inputs[1]?.value.trim() || "",
                number: inputs[2]?.value.trim() || "",
                date: "2023-01-01"
            };
            console.log(`üìò –î–∏–ø–ª–æ–º #${idx + 1}:`, diploma);
            data.diplomas.push(diploma);
        });

        // –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        document.querySelectorAll('#certificates-tab div[data-id]').forEach((c, idx) => {
            const inputs = c.querySelectorAll('input');
            const cert = {
                university: inputs[0]?.value.trim() || "",
                series: inputs[1]?.value.trim() || "",
                number: inputs[2]?.value.trim() || "",
                date: "2023-01-01"
            };
            console.log(`üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç #${idx + 1}:`, cert);
            data.certificates.push(cert);
        });

        // –ö–ª–∏–Ω–∏–∫–∏
        document.querySelectorAll('#clinics-tab div[data-id]').forEach((cl, idx) => {
            const inputs = cl.querySelectorAll('input');
            const clinic = {
                clinic_name: inputs[0]?.value.trim() || "",
                department: inputs[1]?.value.trim() || "",
                position: inputs[2]?.value.trim() || "",
                specialty: "–¢–µ—Ä–∞–ø–µ–≤—Ç"
            };
            console.log(`üè• –ö–ª–∏–Ω–∏–∫–∞ #${idx + 1}:`, clinic);
            data.clinic_affiliations.push(clinic);
        });

        console.log("üì¶ –ü–æ–ª–Ω—ã–π payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", data);

        const response = await fetch(`/api/admin/signup_as_doctor?user_cor_id=${encodeURIComponent(corId)}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${getToken()}`
            },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (${response.status}):`, errorText);
            throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}\n${errorText}`);
        }

        const result = await response.json();
        console.log("‚úÖ –í—Ä–∞—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", result);
        alert("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–¥–µ–ª—ë–Ω –ø—Ä–∞–≤–∞–º–∏ –≤—Ä–∞—á–∞!");

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–∞—á–∞:", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + error.message);
    }
}



async function showDoctorInfo(corId) {
    const roleInfoContent = document.getElementById("roleInfoContent");
    
    try {
        console.log('[DoctorInfo] –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞ –¥–ª—è corId:', corId);
        
        if (typeof corId !== 'string') {
            const errorMsg = `–û–∂–∏–¥–∞–ª—Å—è string corId, –ø–æ–ª—É—á–µ–Ω–æ: ${typeof corId}`;
            console.error('[DoctorInfo] –û—à–∏–±–∫–∞:', errorMsg, corId);
            throw new Error(errorMsg);
        }

        roleInfoContent.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞...</p>';
        
        const response = await fetch(`/api/admin/get_user_info/${corId}/doctors-data`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Authorization': 'Bearer ' + getToken()
            }
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        const doctorInfo = data.doctor_info || {};
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ roleInfoModal
        roleInfoContent.innerHTML = `
    <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞—á–µ</h3>
    <div class="doctor-tabs">
        <div class="tabs-header">
            <button class="tab-btn active" data-tab="personal">–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</button>
            <button class="tab-btn" data-tab="documents">–î–æ–∫—É–º–µ–Ω—Ç—ã</button>
            <button class="tab-btn" data-tab="diplomas">–î–∏–ø–ª–æ–º—ã</button>
            <button class="tab-btn" data-tab="certificates">–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã</button>
            <button class="tab-btn" data-tab="clinics">–ö–ª–∏–Ω–∏–∫–∏</button>
        </div>     
            <div id="personal-tab" class="tab-pane">
                ${renderPersonalInfo(doctorInfo)}
            </div>
            <div id="documents-tab" class="tab-pane">
                ${renderDocuments(doctorInfo)}
            </div>
            <div id="diplomas-tab" class="tab-pane">
                ${renderDiplomas(doctorInfo.diplomas || [])}
            </div>
            <div id="certificates-tab" class="tab-pane">
                ${renderCertificates(doctorInfo.certificates || [])}
            </div>
            <div id="clinics-tab" class="tab-pane">
                ${renderClinics(doctorInfo.clinic_affiliations || [])}
            </div>       
    </div>
    <button id="saveDoctorButton" class="button" style=" bottom:10px; margin:-10px 120px; margin-top:20px;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–∞—á–∞</button>
`;


initTabs();
 document.getElementById("saveDoctorButton")?.addEventListener("click", () => {saveDoctorData(corId); });

    } catch (error) {
        console.error('[DoctorInfo] –û—à–∏–±–∫–∞:', error);
        roleInfoContent.innerHTML = `<p class="error">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ: ${error.message}</p>`;
    }
    
}
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
function renderPersonalInfo(doctor) {
    return `
        <h4>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
        <div class="form-group-width">
            <label>–ò–º—è:</label>
            <input type="text" id="doctorFirstName" value="${doctor.first_name || ''}">
        </div>
        <div class="form-group-width">
            <label>–§–∞–º–∏–ª–∏—è:</label>
            <input type="text" id="doctorLastName" value="${doctor.last_name || ''}">
        </div>
        <div class="form-group-width">
            <label>–û—Ç—á–µ—Å—Ç–≤–æ:</label>
            <input type="text" id="doctorMiddleName" value="${doctor.middle_name || ''}">
        </div>
        <div class="form-group-width">
            <label>–†–∞–±–æ—á–∏–π email:</label>
            <input type="email" id="doctorWorkEmail" value="${doctor.work_email || ''}">
        </div>
        <div class="form-group-width">
            <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
            <input type="tel" id="doctorPhone" value="${doctor.phone_number || ''}">
        </div>
      
    `;
}

function renderDocuments(doctor) {
    return `
        <h4>–î–æ–∫—É–º–µ–Ω—Ç—ã</h4>
        <div class="form-group-width">
            <label>–ü–∞—Å–ø–æ—Ä—Ç:</label>
            <input type="text" id="doctorPassportCode" value="${doctor.passport_code || ''}">
        </div>
        <div class="form-group-width">
            <label>–ú–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</label>
            <input type="text" id="doctorRegistration" value="${doctor.place_of_registration || ''}">
        </div>
        <div class="form-group-width">
            <label>–ò–ù–ù:</label>
            <input type="text" id="doctorInn" value="${doctor.taxpayer_identification_number || ''}">
        </div>
        <div class="form-group-width">
            <label>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏:</label>
            <input type="date" id="doctorAttestationDate" value="${doctor.date_of_last_attestation || ''}">
        </div>
        <div class="form-group-width">
            <label>–ù–∞—É—á–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å:</label>
            <input type="text" id="doctorDegree" value="${doctor.scientific_degree || ''}">
        </div>
    `;
}

function renderDiplomas(diplomas) {
    const list = diplomas.length > 0 ? diplomas : [{}];  // —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É—Å—Ç–æ–π

    return `
        <div class="documents-list">
            ${list.map((diploma, index) => `
                <div data-id="${diploma.id || ''}">
                    <h4>–î–∏–ø–ª–æ–º</h4>
                    <div class="form-group-width">
                        <label>–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:</label>
                        <input type="text" value="${diploma.university || ''}">
                    </div>
                    <div class="form-group-width">
                        <label>–°–µ—Ä–∏—è:</label>
                        <input type="text" value="${diploma.series || ''}">
                    </div>
                    <div class="form-group-width">
                        <label>–ù–æ–º–µ—Ä:</label>
                        <input type="text" value="${diploma.number || ''}">
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}


function renderCertificates(certificates) {
    const list = certificates.length > 0 ? certificates : [{}];

    return `
        <div class="documents-list">
            ${list.map((cert, index) => `
                <div data-id="${cert.id || ''}">
                    <h4>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç</h4>
                    <div class="form-group-width">
                        <label>–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:</label>
                        <input type="text" value="${cert.university || ''}">
                    </div>
                    <div class="form-group-width">
                        <label>–°–µ—Ä–∏—è:</label>
                        <input type="text" value="${cert.series || ''}">
                    </div>
                    <div class="form-group-width">
                        <label>–ù–æ–º–µ—Ä:</label>
                        <input type="text" value="${cert.number || ''}">
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

function renderClinics(clinics) {
    const list = clinics.length > 0 ? clinics : [{}];

    return `
        <div class="clinics-list">
            ${list.map((clinic, index) => `
                <div data-id="${clinic.id || ''}">
                    <h4>–ö–ª–∏–Ω–∏–∫–∞</h4>
                    <div class="form-group-width">
                        <label>–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
                        <input type="text" value="${clinic.clinic_name || ''}">
                    </div>
                    <div class="form-group-width">
                        <label>–û—Ç–¥–µ–ª–µ–Ω–∏–µ:</label>
                        <input type="text" value="${clinic.department || ''}">
                    </div>
                    <div class="form-group-width">
                        <label>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</label>
                        <input type="text" value="${clinic.position || ''}">
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}